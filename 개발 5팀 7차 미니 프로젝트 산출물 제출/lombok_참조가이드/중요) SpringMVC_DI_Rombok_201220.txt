※ SpringMVC, DI(의존성주입), Lombok 테스트

1. SpringMVC 생성
   : 다음의 각 단계별 Update/Import/저장 후에는
    우측 하단 프로그레스바(ProgressBar) 설치 종료를
    필히, 확인해 주시기 바라며, STS 설치 경로 주소에
    한글과 공백이 없도록 설치해 줍니다.

  1) Window - Show View - Navigator 클릭하고,
      좌측 Navigator 창 생성을 확인합니다.

  2) File - New - Spring Legacy Project
  (Legacy: 유산이란 의미이며, 레거시 프로그램과 데이터는
   프로그래밍 언어, 플랫폼 그리고 기술 등에 있어,
   과거로 부터 물려 내려온 것들을 의미합니다. 여기서는,
   일반적인 Spring Framework 기반 프로젝트를 말합니다)

   3) Project name: 란에 LombokTest 라고 입력합니다.
       Templates: 에서는 Spring MVC Project 를 선택합니다.
       Next - test.di.controller 라고 입력해 주고, Finish 를
       클릭해 줍니다.

   4) 좌측 Navigator 창에서 생성된 LombokTest - src -
       main - java - test - di - controller - HomeController.java
       파일을 확인합니다.

   5) LombokTest 프로젝트에서 마우스 우클릭 - Properties -
       하단 - Web Project Settings - Context root: 란에서
       controller 를 지우고 / 를 입력해 줍니다. 그리고,
       Apply - Apply and Close 를 클릭해 줍니다.
   
   6) 그리고, pom.xml 파일의 11번 라인과 12번 라인을 다음과 같이 수정해 줍니다.
       <java-version>1.8</java-version>
       <org.springframework-version>4.0.7.RELEASE</org.springframework-version>

   7) 그리고, pom.xml 파일의 141 라인과 142 라인을 다음과 같이 수정해 줍니다.
                    <source>${java-version}</source>
                    <target>${java-version}</target>

   8) 그리고, pom.xml 파일에서 마우스 우클릭 - Maven - Update Project... - OK 클릭

   9) 그리고, Lombok을 설치해 줍니다. 다음의 Maven Repository에 접속합니다.
       https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.8
       Maven 밑에 Lombok dependency 를 복사합니다.

  10) 그리고, pom.xml 파일에서 118번과 119번 라인 사이에 다음과 같이 추가해 줍니다.
<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.8</version>
    <scope>provided</scope>
</dependency>

  11) 좌측 Package Explorer에서 Maven Dependencies 에서 [예시] lombok-1.18.8.jar 파일을 확인합니다.

  [중요] Lombok은 https://projectlombok.org/download 공식사이트, maven, gradle 등 다양한 경로를 통해 다운받을 수 있고,

         ① 공식사이트 ② pom.xml 직접 작성(Maven) ③ springboot 초기설정 등

         3가지 방법으로 다운받고 설치할 수 있습니다.

         maven 또는 springboot 초기 설정 등을 이용해 다운로드한 경우 : maven repository 내 lombok 디렉토리로 이동 설치해 줍니다.

         (예시 :  C:\Users\starh\.m2\repository\org\projectlombok\lombok\1.18.18 폴더에서

                   java -jar lombok-1.18.18.jar 실행 - Specify Location...

	     - C:\DEV_SPRING\sts-bundle\sts-3.9.12.RELEASE 폴더에 sts.exe 실행 파일 선택)

                  - install/update - Quit Installer)
[더 자세히]
-package Explorer - Maven Dependencies - lombok 1.18.8.jar에서 마우스우클릭 
-java Source Attachment - External location - path: 경로를 복사(파일명제외) 
-cmd창 - cd\ - cd 복사한 경로 붙여넣기 - 
-붙여넣은 경로로 가면 -  [java -jar lombok-1.18.18.jar] 붙여넣어서 실행
-그러면 경고창 하나 뜰 것임 그거 확인 누르고 - 빨간 고추가 그려진 창에서 Specify Location 눌러주기 
-C:\DEV_SPRING\sts-bundle\sts-3.9.12.RELEASE 폴더에 sts.exe 실행 파일 선택- install/update - Quit Installer)

  [참고] https://projectlombok.org/download 웹 사이트에서 Maven build된 버전과 같은

          Lombok 버전을 다운로드 받아서 cmd 창에서 실행도 가능함 [예시] java -jar lombok-1.18.8.jar

  12) 좌측 하단 Pivotal tc Server Developer Edition v4.0 또는 Tomcat v9.0 Server at localhost 에서
       마우스 우클릭 - Add and remove - Available: 에서 LombokTest를 Configured: 로 Add해 주고
       Finish를 클릭해 줍니다

  13) 그리고, 좌측 하단 Pivotal tc Server Developer Edition v4.0 또는 Tomcat v9.0 Server at localhost을
       더블클릭해주고, Overview가 나타나면 하단에 Modules를 클릭해 주고, Path 클릭 - Edit... 클릭 -
       /controller 를 / 로 변경해 주고, OK - 저장
  14) LombokTest에서 마우스 우클릭 - Run As - Run on Server 를 해주면 URL http://localhost:8080/
       즉, 8080 포트에서 실행이 됩니다.       
       Hello world! 
       The time on the server is 2020? 11? 15? (?) ?? 11? 45? 36?. 

2. Spring 컨테이너 안에 들어가는 Bean들에 대한 설정을 변경해 보겠습니다.

   1) 우선, LombokTest/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml 에서
      컴포넌트 스캔의 범위를 넓혀줍니다. 24번 라인을 다음과 같이 변경해 줍니다. test.di를
      앞서 controller에 국한하지 않고, 다음과 같이 test.di 이후로 모두 스캔할 수 있게 변경해 줍니다.
      <context:component-scan base-package="test.di" />

   2) 중앙 "Beans Graph"를 클릭해서 spring Beans를 살펴봅니다. 지금은 Spring의 homeController가
       한개 있습니다. 여기에, 하나를 더 추가해 보겠습니다. di 폴더에서 Ctrl+N - folder - service 생성,
       그리고, 같은 방법으로 vo 폴더도 만들어 줍니다. service 폴더에는 Ctrl+N - class - HomeService 생성(Enter)

   3) HomeService 소스 코딩
       3번 라인에 @Service 입력 후 Ctrl+Shift+O 로 임포트를 해줍니다.
	package test.di.service;

	import org.springframework.stereotype.Service;

	@Service
	public class HomeService {
		public void backHome() { // getHome()을 backHome()으로 수정해줌
		 System.out.println("반가워요~");
	     }
	}

   4) HomeController.java 파일에서 Lombok 적용
     
       slf4j 의 경우, log 활용이 가능하며, @Controller 밑에 @Slf4J 입력해주고
       // final Logger를 final Log로 변경해 봄. 그리고, 23번 라인의 다음 구문은 주석 처리를 해줌.
       // private static final Log logger = LoggerFactory.getLogger(HomeController.class); 

       // 30번 라인의 logger.info("Welcome home! The client locale is {}.", locale); 를
          log.info("Welcome home! The client locale is {}.", locale); 로 수정해 줌.
          애노테이션(@Slf4j) 위에서 마우스 올려놓고 Change to 'Slf4j' (lombok.extern.slf4j) 클릭해 줌.
          필히, log.info("~")에서 log 수정 후 @Slf4j 에서 Change to 'Slf4j' (lombok.extern.slf4j) 클릭하기 바람.

       앞서 구문의 적용을 확인해 봅시다. target/classes/test/di/controller/HomeController.class를
       클릭해 보시기 바랍니다. 우리는 적용을 하지 않았지만, 컴파일된 class 파일에는 적용이 되어 있습니다.

       ※ Lombok @Slf4j 에서 log cannot be resolved 오류 해결 방법

        Maven Dependencies - lombok.jar 파일에서 마우스 우클릭 - Run as - Java Application 실행

        - 사용중인 STS IDE의 ini 파일을 지정해준 뒤 STS IDE를 종료 후 재시작합니다.

        재시작하고나서 Project - Clean 해주면 됨     

    ※ 이클립스 STS decompiler 설치
    
       Help - Eclipse Marketplace - decompiler 검색 - Enhanced Class Decompiler 3.1.1 Install -
       Confirm - I accept... - Finish - Install Anyway... - Restart Now (STS 재시작)

       앞서 구문의 적용을 확인해 봅시다. target/classes/test/di/controller/HomeController.class를
       마우스 우클릭 - Open With - Class Decompiler Viewer 클릭해 보시기 바랍니다.
       우리는 적용을 하지 않았지만, 컴파일된 class 파일에는 앞서 주석 내용들이 적용 되어 있습니다.
       그래서, 실행을 하면 에러 없이 실행이 됩니다. 이렇게 @Slf4j Lombok 1개를 써보았습니다.
       HomeController.java 파일에서 import lombok.extern.slf4j.Slf4j; 구문을 확인 바랍니다.

   5) HomeController.java 파일에서 DI(의존주입) 적용 : 첫번째 방법

     22번 라인에 private HomeService homeService; 소스 작성 -
     Ctrl+Shift+O [import test.di.service.HomeService; 상단에 임포트됨]

     DI(의존주입 방법) 첫번째
     23라인에서 Alt+Shift+S R - Select getters and setters to create: 에서
     homeService - setHomeService(HomeService) 체크 - Generate 클릭

     // public void setHome~ 위에 @Autowired 입력하고, Ctrl+Shift+O 하면
     // 상단에 import org.springframework.beans.factory.annotation.Autowired; 나타남.
         HomeController가 호출되면, @Autowired가 적용되면서 setHomeService()가 실행되게 됨

     @Autowired 
     public void setHomeService(HomeService homeService) {
 	this.homeService = homeService;
     }      

     또는 @Autowired
           private HomeService homeService; 만 남겨주고 실행해도 DI 적용 확인이 가능함.

    [38번 라인 : 즉, log.info("Welcome home! The client locale is {}.", locale); 아래에
                          homeService.backHome(); 입력해 주고 저장함.
     LombokTest 프로젝트 - 우클릭 - Run as - Run on Server 클릭해 줌.
     그러면 앞서 HomeService.java의 출력내용이 Console 에 다음과 같이 출력됨을 확인할 수 있음. 
     INFO : test.di.controller.HomeController - Welcome home! The client locale is ko_KR.
     반가워요~

      HomeController 파일을 복사 - HomeController_407로 이름을 변경해 줍니다.

  6) HomeController.java 파일에서 DI(의존주입) 적용 : 두번째 방법(Spring 버전 Update 후 생성자 활용)
      pom.xml 파일에서 12번 라인 <org.springframework-version>4.0.7.RELEASE</org.springframework-version>
      <org.springframework-version>4.3.1.RELEASE</org.springframework-version>

      HomeController 파일에서 불필요한 주석을 지워주고 다음과 같이 수정해 줍니다. Alt+Shift+S O 해서
      생성자를 마치 Spring에서 JAVA를 활용하는 것처럼 DI(의존 주입) 적용도 가능합니다.
       Object() 생성자 homeService - Generate 클릭 - super(); 는 필요가 없으니 삭제해 줌.
      @Autowired도 필요없음. LombokTest 프로젝트 - 우클릭 - Run as - Run on Server 클릭해 줌.
	
             private HomeService homeService;
	
	public void HomeController(HomeService homeService) {
		this.homeService = homeService;
	}

  7) Lombok을 이용하면, 앞서 6)번에서 Object() 생성자 마저도 필요없어짐.
      public class HomeController 위에 @RequiredArgsConstructor 입력함.
	@Controller
	@Slf4j
	@RequiredArgsConstructor
	public class HomeController {
	
		private final HomeService homeService;

  8) 또한, private final HomeService homeService; 구문에서 final을 빼고 선언하고 싶다면,
      @NonNull 을 선언해 주면 final을 사용하지 않고도 생성자를 활용할 수 있게 됩니다. 서버 실행 확인!
	@Controller
	@Slf4j
	@RequiredArgsConstructor
	public class HomeController {
		@NonNull
		private HomeService homeService;

3. VO(Value Object) 생성 활용 방법
   HomeService.java 파일을 열어줍니다. backHome()를 VO와 연계 활용합니다.
   앞서 만들었던 vo 폴더에서 New-class 파일 생성 - 파일명은 BreadVo1 로 합니다.
   package test.di.vo;

public class BreadVo1 {
	private String name;
	private int age;
	// Alt+Shift+S R 클릭 Getters 와 Setters를 생성해 줍니다.
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public int getAge() {
			return age;
		}
		public void setAge(int age) {
			this.age = age;
		}
}

 4. HomeService.java 파일에 다음과 같이 vo1 객체를 생성해 줍니다. 서버 실행 확인!
	public void backHome() {
		BreadVo1 vo1 = new BreadVo1();
		vo1.setName("장나라");
		vo1.setAge(20);
		System.out.printf("%s 반가워요~ \n", vo1.getName());
	}

5. 이제 Lombok을 적용해 봅시다
   BreadVo1.java 파일에서 Getters 와 Setters를 생성자들을 지워줍니다.
   그리고, 다음과 같이 @Setter, @Getter을 선언해 줍니다. 서버 실행 확인!
	@Setter
	@Getter
	public class BreadVo1 {
		private String name;
		private int age;
}
    
6. target/classes/test/di/vo 폴더에 있는 BreadVo1.class 파일 - 마우스 우클릭 -
   Open With - Class Decomplier Viewer 로 BreadVo1.class 파일을 보면
   Getters와 Setters가 컴파일 되면서 자동 생성되어 있는 것을 알 수 있습니다.

7. 앞서 5번 BreadVo1.java 파일에서 @Setter, @Getter 대신에
   @Data를 선언해 줄 수도 있습니다. @Data 입력 후 Ctrl+Shift+O 클릭해 줌. 저장!
   이 경우, Getters와 Setters 뿐만 아니라, equals, canEqual, hashCode(),
    toString() 들도 컴파일 되면서 자동 생성되게 할 수 있습니다. 서버 실행 확인!

8. BreadVo2.java 파일 생성 후 멤버 변수로 name, age 선언해 줍니다.
public class BreadVo2 {
	private String name;
	private int age;
 
9. 그리고, Alt+Shift+S O 클릭해서 생성자를 생성해 줍니다.
   public class BreadVo2 {
	private String name;
	private int age;
	
	public BreadVo2(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}

10. HomeService.java 파일에서 다음과 같이 vo2를 생성해 줍니다.
 @Service
public class HomeService {
	public void backHome() {
		BreadVo1 vo1 = new BreadVo1();
		vo1.setName("장나라");
		vo1.setAge(20);
		
		BreadVo2 vo2 = new BreadVo2("홍길동", 25); // Ctral+Shift+O Bread 클래스 임포트
		System.out.printf("%s 반가워요~ \n", vo2.getName()); // getName() 에러는 다음11번 수행해서 문제 해결함
	}
}

11. BreadVo2.java 파일에 다음과 같이 @Getter Lombok을 추가해 줍니다. 서버 실행 확인!
@Getter
public class BreadVo2 {
	private String name;
	private int age;
	
	public BreadVo2(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
}

12. BreadVo2.java 파일에 다음과 같이 @AllArgsConstructor를 추가해 줍니다.
     그리고, 12라인 ~ 16라인 BreadVo2(String name, int age) 부분을 주석 처리해 줍니다.
     그리고, target/classes/test/di/vo 폴더에 있는 BreadVo2.class 파일 - 마우스 우클릭 -
      Open With - Class Decomplier Viewer 로 BreadVo1.class 파일을 보면
      주석 처리된 BreadVo2(String name, int age)부분도 컴파일 되면서 자동 생성되어
      있는 것을 알 수 있습니다. 서버 실행 확인!
@Getter
@AllArgsConstructor
public class BreadVo2 {
	private String name;
	private int age;
	
//	public BreadVo2(String name, int age) {
//		super();
//		this.name = name;
//		this.age = age;
//	}
}

13. 빌더(Builer) 패턴 활용 : BreadVo3.java 파일 생성 후 멤버 변수로 name, age 선언해 줍니다.
public class BreadVo3 {
	private String name;
	private int age;
 
14. 그리고, Alt+Shift+S O 클릭해서 생성자를 생성해 줍니다.
   그리고, @Builder lombok를 생성해 줍니다.
   public class BreadVo3 {
	private String name;
	private int age;
	
	@Builder // @Builder lombok 생성
	public BreadVo3(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
}

15. HomeService.java 파일에서 다음과 같이 vo3을 생성해 줍니다.
 @Service
public class HomeService {
	public void backHome() {
		BreadVo1 vo1 = new BreadVo1();
		vo1.setName("장나라");
		vo1.setAge(20);
		
		BreadVo2 vo2 = new BreadVo2("홍길동", 25);
		BreadVo3 vo3 = BreadVo3.builder()
				        .age(30)
				        .name("임꺽정")
				        .build();

		System.out.printf("%s 반가워요~ \n", vo3.getName()); // vo3 에러는 다음 16번을 수행하면 문제가 해결됨
	}
}

16. BreadVo3.java 에서 @Getter lombok를 다음과 같이 추가해주고, 서버 실행 확인해 줍니다.
     // 빌더(Builder) 패턴 활용
@Getter
public class BreadVo3 {
	private String name;
	private int age;
	@Builder
	public BreadVo3(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
}

