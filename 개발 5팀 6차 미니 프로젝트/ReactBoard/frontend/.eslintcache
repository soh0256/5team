[{"C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\index.js":"1","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\App.js":"2","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\auth.js":"3","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\views\\Form.js":"4","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\views\\Login.js":"5","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\views\\Board.js":"6","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\views\\View.js":"7","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\history.js":"8","C:\\6차 프로젝트\\react\\frontend\\src\\index.js":"9","C:\\6차 프로젝트\\react\\frontend\\src\\App.js":"10","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Login.js":"11","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Board.js":"12","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Form.js":"13","C:\\6차 프로젝트\\react\\frontend\\src\\views\\View.js":"14","C:\\6차 프로젝트\\react\\frontend\\src\\auth.js":"15","C:\\6차 프로젝트\\react\\frontend\\src\\history.js":"16","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Callback.js":"17","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Register.js":"18","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Address.js":"19","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Ipopup.js":"20","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Mpopup.js":"21"},{"size":419,"mtime":1607771806000,"results":"22","hashOfConfig":"23"},{"size":1311,"mtime":1607771992000,"results":"24","hashOfConfig":"23"},{"size":1819,"mtime":1619428952519,"results":"25","hashOfConfig":"23"},{"size":2791,"mtime":1607772310000,"results":"26","hashOfConfig":"23"},{"size":1572,"mtime":1607772198000,"results":"27","hashOfConfig":"23"},{"size":4751,"mtime":1619362067742,"results":"28","hashOfConfig":"23"},{"size":3399,"mtime":1619428960303,"results":"29","hashOfConfig":"23"},{"size":146,"mtime":1607771826000,"results":"30","hashOfConfig":"23"},{"size":419,"mtime":1607771806000,"results":"31","hashOfConfig":"32"},{"size":1965,"mtime":1620675727902,"results":"33","hashOfConfig":"32"},{"size":2642,"mtime":1620665439134,"results":"34","hashOfConfig":"32"},{"size":4751,"mtime":1620676834963,"results":"35","hashOfConfig":"32"},{"size":2791,"mtime":1607772310000,"results":"36","hashOfConfig":"32"},{"size":3398,"mtime":1620663504597,"results":"37","hashOfConfig":"32"},{"size":1818,"mtime":1620663504557,"results":"38","hashOfConfig":"32"},{"size":146,"mtime":1607771826000,"results":"39","hashOfConfig":"32"},{"size":2067,"mtime":1620663862705,"results":"40","hashOfConfig":"32"},{"size":14085,"mtime":1620678720131,"results":"41","hashOfConfig":"32"},{"size":1205,"mtime":1620665812496,"results":"42","hashOfConfig":"32"},{"size":202,"mtime":1620665804645,"results":"43","hashOfConfig":"32"},{"size":205,"mtime":1620665809395,"results":"44","hashOfConfig":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2ozdgr",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"l3q5sv",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"67"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"67"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"67"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"67"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\index.js",[],"C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\App.js",[],"C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\auth.js",["97"],"import axios from \"axios\";\r\n\r\nconst api = \"http://172.30.1.43:3000\"; // api 주소 지정\r\n\r\n// 기본 리턴\r\nexport default {\r\n  loggedIn: false, // 로그인 여부\r\n  name: null, // 사용자명\r\n\r\n  logout() {\r\n    this.loggedIn = false;\r\n    localStorage.clear();\r\n  }, // 로그아웃 기능\r\n  default() {\r\n    axios.defaults.baseURL = api;\r\n  }, // axios의 기본 url 변경\r\n  chkAuth() {\r\n    axios.defaults.baseURL = api; // axios의 기본 url 변경\r\n\r\n    const token = localStorage.getItem(\"token\"); // 토근을 로컬스토리지에서 읽어옴\r\n    const name = localStorage.getItem(\"name\"); // 이름을 로컬스토리지에서 읽어옴\r\n    if (!token) return; // 없는경우 리턴\r\n\r\n    this.loggedIn = true; // 로그인 체크\r\n    this.name = name; // 이름 변경\r\n\r\n    // 토큰정보를 요청 시 포함하도록 업데이트\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.post[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.get[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.delete[\"Authorization\"] = \"Bearer \" + token;\r\n  },\r\n  setAuth(data) {\r\n    this.loggedIn = true; // 로그인\r\n    this.name = data.name; // 이름 설정\r\n\r\n    localStorage.setItem(\"name\", data.name); // 로컬스토리지 데이터 설정\r\n    localStorage.setItem(\"token\", data.token); // 로컬스토리지 데이터 설정\r\n\r\n    // 토큰정보를 요청 시 포함하도록 업데이트\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.post[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.get[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.delete[\"Authorization\"] = \"Bearer \" + data.token;\r\n  },\r\n};\r\n","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\views\\Form.js",["98","99"],"import React from 'react'\r\nimport { Row, Col, Form, Button } from 'react-bootstrap'\r\nimport { history } from '../history'\r\n\r\nimport axios from 'axios'\r\n\r\nexport default class Add extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\t// 파라미터에서 id를 읽어와 수정모드인지 추가모드인지 확인\r\n\t\tthis.state = {\r\n\t\t\tid: props.match.params.id,\r\n\t\t\tmode: props.match.params.id ? 'edit' : 'add',\r\n\r\n\t\t\ttitle: null,\r\n\t\t\tcontent: null,\r\n\t\t\timage: null,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { id } = this.state // id를 읽어옴\r\n\t\tif(!id) return // id가 없는경우 종료\r\n\r\n\t\t// 수정모드이므로 게시글 정보를 읽어와 저장\r\n\t\taxios.get('/board/' + id)\r\n\t\t\t.then(res => this.setState({ ...res.data }))\r\n\t}\r\n\r\n\taction() {\r\n\t\tconst { title, content, image, mode, id } = this.state // 데이터를 읽어옴\r\n\r\n\t\t// 폼 생성 및 데이터 추가\r\n\t\tlet form = new FormData()\r\n\t\tform.append('pk', id)\r\n\t\tform.append('title', title)\r\n\t\tform.append('content', content)\r\n\t\tif(image) form.append('image', image)\r\n\r\n\t\t// 추가 모드이면 put 메소드. 업데이트면 post 메소드로 전송\r\n\t\tif(mode == 'add') {\r\n\t\t\taxios.put('/board', form, { headers: { 'Content-Type': 'multipart/form-data; charset=utf-8;' }})\r\n\t\t\t\t.then(res => { alert(res.data.msg); history.goBack() }) // 성공 시 알림 및 페이지 되돌아가기\r\n\t\t\t\t.catch(err => alert(err.response.data.msg)) // 실패 시 알림\r\n\t\t} else {\r\n\t\t\taxios.post('/board', form, { headers: { 'Content-Type': 'multipart/form-data; charset=utf-8;' }})\r\n\t\t\t\t.then(res => { alert(res.data.msg); history.goBack() }) // 성공 시 알림 및 페이지 되돌아가기\r\n\t\t\t\t.catch(err => alert(err.response.data.msg)) // 실패 시 알림\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { title, content, mode } = this.state\r\n\r\n\t\treturn (<>\r\n\t\t\t<Row className='mb-2'>\r\n\t\t\t\t<Col md={12}>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>제목</Form.Label>\r\n\t\t\t\t\t\t<Form.Control type='text' value={title} onChange={(event) => this.setState({ title: event.target.value })}/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>내용</Form.Label>\r\n\t\t\t\t\t\t<Form.Control type='text' value={content} onChange={(event) => this.setState({ content: event.target.value })}/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Label>이미지</Form.Label>\r\n\t\t\t\t\t\t<Form.File accept='image/*' onChange={(event) => this.setState({ image: event.target.files[0] })}/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t<Button className='btn-secondary btn-block' onClick={() => history.goBack()}>취소</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t\t<Button className='btn-secondary btn-block' onClick={() => this.action()}>{mode == 'add' ? '글쓰기' : '수정'}</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</>)\r\n\t}\r\n}\r\n","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\views\\Login.js",[],"C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\views\\Board.js",["100"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Table, Form, Button } from 'react-bootstrap'\r\nimport ReactPaginate from 'react-js-pagination'\r\n\r\nimport axios from 'axios'\r\nimport auth from '../auth'\r\n\r\nexport default class Board extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: [],\r\n\t\t\tpage: 0,\r\n\t\t\tcount: 0,\r\n\t\t\tperPage: 0,\r\n\t\t\tsearch: null,\r\n\t\t}\r\n\r\n\t\tthis.getData()\r\n\t}\r\n\r\n\tgetData() {\r\n\t\t// 게시글 리스트를 읽어와 저장\r\n\t\taxios.get('/board').then(res => {\r\n\t\t\tconst data = res.data\r\n\t\t\tthis.setState({ data: this.appendChkOpt(data.data), ...data })\r\n\t\t})\r\n\t}\r\n\r\n\tsearch() {\r\n\t\tconst { search } = this.state // 검색어를 읽어옴\r\n\r\n\t\t// 검색어 쿼리로 요청 및 저장\r\n\t\taxios.get('/board', { params: { search } }).then(res => {\r\n\t\t\tconst data = res.data\r\n\t\t\tthis.setState({ data: this.appendChkOpt(data.data), ...data })\r\n\t\t})\r\n\t}\r\n\r\n\thandlePage(page) {\r\n\t\tconst { search } = this.state\r\n\r\n\t\t// 페이지 업데이트. 검색어와 페이지 정보로 읽어와 저장\r\n\t\taxios.get('/board', { params: { search, page } }).then(res => {\r\n\t\t\tconst data = res.data\r\n\t\t\tthis.setState({ data: this.appendChkOpt(data.data), ...data })\r\n\t\t})\r\n\t}\r\n\r\n\t// 체크박스에 대한 옵션을 추가해주는 함수\r\n\tappendChkOpt(data) {\r\n\t\treturn data.map(obj => { return { ...obj, check: false } })\r\n\t}\r\n\t// 체크박스 클릭처리 이벤트 함수\r\n\tclickCheckbox(index) {\r\n\t\tlet { data } = this.state\r\n\t\t// data의 index 데이터에 check 옵션 toggle\r\n\t\tdata[index].check = !data[index].check\r\n\t\tthis.setState({ data }) // data저장\r\n\t}\r\n\t// 전체선택 함수\r\n\tallCheck(checked) {\r\n\t\tlet { data } = this.state\r\n\t\t// data의 모든 값들을 입력받은 checked로 저장\r\n\t\tthis.setState({ data: data.map(obj => { return { ...obj, check: checked } }) })\r\n\t}\r\n\t// pk에 대한 게시글 삭제\r\n\tdeleteOne(pk) {\r\n\t\t// pk를 옵션으로 삭제\r\n\t\taxios.delete('/board/', { data: { pk } })\r\n\t\t\t.then(res => {\r\n\t\t\t\talert(res.data.msg) // 결과 알림\r\n\t\t\t\tthis.getData() // 게시글을 새로 불러옴\r\n\t\t\t})\r\n\t}\r\n\t// 선택된 게시글 삭제\r\n\tdeleteChk() {\r\n\t\tconst { data } = this.state\r\n\t\tlet pk_list = [] // 삭제할 pk 리스트\r\n\t\t// 데이터를 반복해 체크가 되어있으면 pk_list에 추가\r\n\t\tdata.map(obj => { if(obj.check) pk_list.push(obj.id) })\r\n\t\t// 삭제 요청\r\n\t\taxios.delete('/board', { data: { pk: pk_list } })\r\n\t\t\t.then(res => {\r\n\t\t\t\talert(res.data.msg) // 결과 알림\r\n\t\t\t\tthis.getData() // 게시글을 새로 불러옴\r\n\t\t\t})\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { data, page, count, perPage } = this.state\r\n\r\n\t\treturn (<>\r\n\t\t\t<Row>\r\n\t\t\t\t<Col md={12} className='pb-4'>\r\n\t\t\t\t\t<span>안녕하세요, {auth.name}님 </span>\r\n\t\t\t\t\t<Link to='/login'>로그아웃</Link>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col md={12} className='mb-2'>\r\n\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th><Form.Check type='checkbox' onClick={(event) => this.allCheck(event.target.checked)}/></th>\r\n\t\t\t\t\t\t\t\t<th>글 번호</th>\r\n\t\t\t\t\t\t\t\t<th>제목</th>\r\n\t\t\t\t\t\t\t\t<th>아이디</th>\r\n\t\t\t\t\t\t\t\t<th>작성자</th>\r\n\t\t\t\t\t\t\t\t<th>관리</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{data.map((obj, index) => <tr key={index}>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<input type='checkbox' checked={obj.check} onClick={() => this.clickCheckbox(index)}/>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>{obj.no}</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<Link to={`/view/${obj.id}`}>{obj.title}</Link>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>{obj.user_id}</td>\r\n\t\t\t\t\t\t\t\t<td>{obj.user_name}</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<Link to={`/edit/${obj.id}`}>수정</Link>\r\n\t\t\t\t\t\t\t\t\t<span> / </span>\r\n\t\t\t\t\t\t\t\t\t<Link onClick={() => this.deleteOne(obj.id)}>삭제</Link>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</Table>\r\n\r\n\t\t\t\t\t{/* 페이징 처리 */}\r\n\t\t\t\t\t<ReactPaginate\r\n\t\t\t\t\t\tactivePage={page}\r\n\t\t\t\t\t\ttotalItemsCount={count}\r\n\t\t\t\t\t\titemsCountPerPage={perPage}\r\n\t\t\t\t\t\tonChange={page => this.handlePage(page)}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tinnerClass='pagination'\r\n\t\t\t\t\t\titemClass='page-item'\r\n\t\t\t\t\t\tactiveClass='active'\r\n\r\n\t\t\t\t\t\tnextPageText='다음'\r\n\t\t\t\t\t\tprevPageText='이전'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col md={10}>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<Form.Control type='text' onChange={(event) => this.setState({ search: event.target.value })}/>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={2}>\r\n\t\t\t\t\t<Button className='btn-secondary btn-block' onClick={() => this.search()}>검색</Button>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t\t<Link to='/add'>\r\n\t\t\t\t\t\t<Button className='btn-secondary btn-block text-white'>글쓰기</Button>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t\t<Button className='btn-secondary btn-block' onClick={() => this.deleteChk()}>선택삭제</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</>)\r\n\t}\r\n}\r\n","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\views\\View.js",["101","102","103"],"import React from \"react\";\r\nimport { Row, Col, Table, Button } from \"react-bootstrap\";\r\nimport { history } from \"../history\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // 파라미터 데이터를 확인\r\n    this.state = {\r\n      id: props.match.params.id,\r\n      info: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id } = this.state; // id 불러옴\r\n    // 게시글 정보를 읽어와 저장\r\n    axios.get(`/board/${id}`).then((res) => this.setState({ info: res.data }));\r\n  }\r\n\r\n  toggleGood() {\r\n    let { info } = this.state;\r\n    // 좋아요를 toggle방식으로 업데이트\r\n    info.good = info.good ? 0 : 1;\r\n    // state에 저장\r\n    this.setState({ info });\r\n  }\r\n\r\n  changeStar(val) {\r\n    let { info } = this.state;\r\n    // 입력한 만큼 별점 저장\r\n    info.star = val;\r\n    this.setState({ info });\r\n  }\r\n\r\n  update() {\r\n    const { id, info } = this.state;\r\n\r\n    // id와 게시글 정보를 서버에 업데이트\r\n    axios\r\n      .post(\"/board/comment\", { pk: id, ...info })\r\n      .then((res) => alert(\"코멘트를 수정하였습니다\")); // 성공 시 알림\r\n  }\r\n\r\n  render() {\r\n    const { info } = this.state; // 게시글 정보를 읽어옴\r\n    // 별점을 읽어와 버튼으로 렌더링\r\n    const stars = [];\r\n    for (let i = 0; i < 5; i++)\r\n      stars.push(\r\n        <Button\r\n          className=\"rounded-0 btn-light px-1\"\r\n          onClick={() => this.changeStar(i + 1)}\r\n        >\r\n          {i < info.star ? \"★\" : \"☆\"}\r\n        </Button>\r\n      ); // 클릭시 별점 업데이트\r\n\r\n    return (\r\n      <>\r\n        <Row className=\"mb-2\">\r\n          <Col md={12}>\r\n            <Table responsive>\r\n              <tr>\r\n                <th width=\"120\">제목</th>\r\n                <td>{info.title}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>글내용</th>\r\n                <td>\r\n                  {info.content != \"null\" ? info.content : \"내용이 없습니다\"}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>이미지</th>\r\n                <td>\r\n                  {info.image && (\r\n                    <img\r\n                      src={`http://172.30.1.43:3000/images/${info.image}`}\r\n                      width=\"100%\"\r\n                    />\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"mb-4\">\r\n          <Col md={12}>\r\n            <Button\r\n              className={`circle ${\r\n                info.good == 1 ? \"btn-warning\" : \"btn-light\"\r\n              } rounded-md mr-4`}\r\n              onClick={() => this.toggleGood()}\r\n            >\r\n              좋아요\r\n            </Button>\r\n\r\n            {stars}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={6}>\r\n            <Button\r\n              className=\"btn-secondary btn-block\"\r\n              onClick={() => this.update()}\r\n            >\r\n              평가내용저장\r\n            </Button>\r\n          </Col>\r\n          <Col md={6}>\r\n            <Button\r\n              className=\"btn-secondary btn-block\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              글목록보기\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\React_Express_Nodejs_OracleDB\\frontend\\src\\history.js",[],"C:\\6차 프로젝트\\react\\frontend\\src\\index.js",[],["104","105"],"C:\\6차 프로젝트\\react\\frontend\\src\\App.js",[],"C:\\6차 프로젝트\\react\\frontend\\src\\views\\Login.js",["106"],"import React from 'react'\r\nimport { Link,Redirect} from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport \"@rmwc/button/styles\"; // React Material Button 디자인 CSS 입니다.\r\nimport NaverLogin from 'react-login-by-naver'\r\n\r\nimport axios from 'axios'\r\nimport auth from '../auth' // 인증\r\n\r\nexport default class Login extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tauth.default() // 기본 url 업데이트\r\n\t\tthis.state = {\r\n\t\t\tid: null,\r\n\t\t\tpassword: null,\r\n\t\t\tloggedIn: false,\r\n\t\t}\r\n\t}\r\n\t\r\n\tlogin = async (event) => {\r\n\t\tevent.preventDefault() // form 이벤트 멈추기\r\n\t\tconst { id, password } = this.state // 데이터 불러옴\r\n\t\t\r\n\t\t// 서버에 로그인정보 전달\r\n\t\taxios.post('/user/login', { id, password })\r\n\t\t\t.then(res => {\r\n\t\t\t\tauth.setAuth(res.data) // 인증정보 저장\r\n\t\t\t\tthis.setState({ loggedIn: true }) // 로그인정보 업데이트\r\n\t\t\t})\r\n\t\t\t.catch(err => alert(err.response.data.msg)) // 실패 시 응답 메시지 알림\r\n\r\n\t}\r\n\r\n\t// 네이버 로그인\r\n\tresponseLogin = async(event) => {\t\r\n\t\tconst { id, password } = this.state // 데이터 불러옴\r\n\t\t\r\n\t\t// 서버에 로그인정보 전달\r\n\t\taxios.post('/user/naverlogin', { id, password })\r\n\t\t\t.then(res => {\r\n\t\t\t\tauth.setAuth(res.data) // 인증정보 저장\r\n\t\t\t\tthis.setState({ loggedIn: true }) // 로그인정보 업데이트\r\n\t\t\t})\r\n\t\t\t.catch(err => alert(err.response.data.msg)) // 실패 시 응답 메시지 알림\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { loggedIn } = this.state // 로그인정보 불러옴\r\n\t\t// 로그인 시 /로 리다이렉트\r\n\t\tif(loggedIn) return <Redirect to='/'/>\r\n\t\t// 아닐경우 폼 렌더링\r\n\t\treturn (<>\r\n\t\t\t<Form onSubmit={this.login}>\r\n\t\t\t\t<Form.Group>\r\n\t\t\t\t\t<Form.Label>아이디</Form.Label>\r\n\t\t\t\t\t<Form.Control type='text' onChange={(event) => this.setState({ id: event.target.value })}/>\r\n\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t<Form.Group>\r\n\t\t\t\t\t<Form.Label>비밀번호</Form.Label>\r\n\t\t\t\t\t<Form.Control type='password'  onChange={(event) => this.setState({ password: event.target.value })}/>\r\n\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t<Button type='submit'>로그인</Button>\r\n\t\t\t</Form>\r\n\r\n\t\t\t<Link to=\"/register\">\r\n\t\t\t\t<Button>회원가입</Button>\r\n        \t</Link>\r\n\t\t\t\r\n\t\t\t<br/>\r\n\t\r\n\t\t\t<NaverLogin\r\n          \t\tclientId=\"edEf7BinacuDsjWZNbw9\"\r\n\t\t\t\t  callbackUrl=\"http://172.30.1.3:3010/management-callback\"\r\n          \t\t  render={(props) => <div onClick={props.onClick}><img src=\"/naver-login.PNG\" /></div>}\r\n          \t\t  onSuccess={(res) => {this.responseLogin(res, \"naver\")}}\r\n          \t\t  onFailure={() => console.log(\"naver login fail\")}\r\n        \t/>\r\n\t\t\r\n\t\t</>)\r\n\t}\r\n}","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Board.js",["107"],"C:\\6차 프로젝트\\react\\frontend\\src\\views\\Form.js",["108","109"],"C:\\6차 프로젝트\\react\\frontend\\src\\views\\View.js",["110","111","112"],"import React from \"react\";\r\nimport { Row, Col, Table, Button } from \"react-bootstrap\";\r\nimport { history } from \"../history\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // 파라미터 데이터를 확인\r\n    this.state = {\r\n      id: props.match.params.id,\r\n      info: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id } = this.state; // id 불러옴\r\n    // 게시글 정보를 읽어와 저장\r\n    axios.get(`/board/${id}`).then((res) => this.setState({ info: res.data }));\r\n  }\r\n\r\n  toggleGood() {\r\n    let { info } = this.state;\r\n    // 좋아요를 toggle방식으로 업데이트\r\n    info.good = info.good ? 0 : 1;\r\n    // state에 저장\r\n    this.setState({ info });\r\n  }\r\n\r\n  changeStar(val) {\r\n    let { info } = this.state;\r\n    // 입력한 만큼 별점 저장\r\n    info.star = val;\r\n    this.setState({ info });\r\n  }\r\n\r\n  update() {\r\n    const { id, info } = this.state;\r\n\r\n    // id와 게시글 정보를 서버에 업데이트\r\n    axios\r\n      .post(\"/board/comment\", { pk: id, ...info })\r\n      .then((res) => alert(\"코멘트를 수정하였습니다\")); // 성공 시 알림\r\n  }\r\n\r\n  render() {\r\n    const { info } = this.state; // 게시글 정보를 읽어옴\r\n    // 별점을 읽어와 버튼으로 렌더링\r\n    const stars = [];\r\n    for (let i = 0; i < 5; i++)\r\n      stars.push(\r\n        <Button\r\n          className=\"rounded-0 btn-light px-1\"\r\n          onClick={() => this.changeStar(i + 1)}\r\n        >\r\n          {i < info.star ? \"★\" : \"☆\"}\r\n        </Button>\r\n      ); // 클릭시 별점 업데이트\r\n\r\n    return (\r\n      <>\r\n        <Row className=\"mb-2\">\r\n          <Col md={12}>\r\n            <Table responsive>\r\n              <tr>\r\n                <th width=\"120\">제목</th>\r\n                <td>{info.title}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>글내용</th>\r\n                <td>\r\n                  {info.content != \"null\" ? info.content : \"내용이 없습니다\"}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>이미지</th>\r\n                <td>\r\n                  {info.image && (\r\n                    <img\r\n                      src={`http://172.30.1.3:3000/images/${info.image}`}\r\n                      width=\"100%\"\r\n                    />\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"mb-4\">\r\n          <Col md={12}>\r\n            <Button\r\n              className={`circle ${\r\n                info.good == 1 ? \"btn-warning\" : \"btn-light\"\r\n              } rounded-md mr-4`}\r\n              onClick={() => this.toggleGood()}\r\n            >\r\n              좋아요\r\n            </Button>\r\n\r\n            {stars}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={6}>\r\n            <Button\r\n              className=\"btn-secondary btn-block\"\r\n              onClick={() => this.update()}\r\n            >\r\n              평가내용저장\r\n            </Button>\r\n          </Col>\r\n          <Col md={6}>\r\n            <Button\r\n              className=\"btn-secondary btn-block\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              글목록보기\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\6차 프로젝트\\react\\frontend\\src\\auth.js",["113"],"import axios from \"axios\";\r\n\r\nconst api = \"http://172.30.1.3:3000\"; // api 주소 지정\r\n\r\n// 기본 리턴\r\nexport default {\r\n  loggedIn: false, // 로그인 여부\r\n  name: null, // 사용자명\r\n\r\n  logout() {\r\n    this.loggedIn = false;\r\n    localStorage.clear();\r\n  }, // 로그아웃 기능\r\n  default() {\r\n    axios.defaults.baseURL = api;\r\n  }, // axios의 기본 url 변경\r\n  chkAuth() {\r\n    axios.defaults.baseURL = api; // axios의 기본 url 변경\r\n\r\n    const token = localStorage.getItem(\"token\"); // 토근을 로컬스토리지에서 읽어옴\r\n    const name = localStorage.getItem(\"name\"); // 이름을 로컬스토리지에서 읽어옴\r\n    if (!token) return; // 없는경우 리턴\r\n\r\n    this.loggedIn = true; // 로그인 체크\r\n    this.name = name; // 이름 변경\r\n\r\n    // 토큰정보를 요청 시 포함하도록 업데이트\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.post[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.get[\"Authorization\"] = \"Bearer \" + token;\r\n    axios.defaults.headers.delete[\"Authorization\"] = \"Bearer \" + token;\r\n  },\r\n  setAuth(data) {\r\n    this.loggedIn = true; // 로그인\r\n    this.name = data.name; // 이름 설정\r\n\r\n    localStorage.setItem(\"name\", data.name); // 로컬스토리지 데이터 설정\r\n    localStorage.setItem(\"token\", data.token); // 로컬스토리지 데이터 설정\r\n\r\n    // 토큰정보를 요청 시 포함하도록 업데이트\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.post[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.get[\"Authorization\"] = \"Bearer \" + data.token;\r\n    axios.defaults.headers.delete[\"Authorization\"] = \"Bearer \" + data.token;\r\n  },\r\n};\r\n","C:\\6차 프로젝트\\react\\frontend\\src\\history.js",[],"C:\\6차 프로젝트\\react\\frontend\\src\\views\\Callback.js",["114"],"import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nimport NaverLogin from 'react-login-by-naver'\r\n\r\nimport axios from 'axios'\r\nimport auth from '../auth' // 인증\r\n\r\nexport default class Login extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tauth.default() // 기본 url 업데이트\r\n\t\tthis.state = {\r\n\t\t\tid: null,\r\n\t\t\tpassword: null,\r\n\t\t\tloggedIn: false,\r\n\t\t}\r\n\t}\r\n\t\r\n\tlogin = async (event) => {\r\n\t\tevent.preventDefault() // form 이벤트 멈추기\r\n\t\tconst { id, password } = this.state // 데이터 불러옴\r\n\t\t\r\n\t\t// 서버에 로그인정보 전달\r\n\t\taxios.post('/user/login', { id, password })\r\n\t\t\t.then(res => {\r\n\t\t\t\tauth.setAuth(res.data) // 인증정보 저장\r\n\t\t\t\tthis.setState({ loggedIn: true }) // 로그인정보 업데이트\r\n\t\t\t})\r\n\t\t\t.catch(err => alert(err.response.data.msg)) // 실패 시 응답 메시지 알림\r\n\r\n\t}\r\n\r\n\r\n\r\n\t  responseLogin = async(event) => {\r\n\t\t\r\n\t  }\r\n\r\n\t\r\n\trender() {\r\n\t\tconst { loggedIn } = this.state // 로그인정보 불러옴\r\n\t\t// 로그인 시 /로 리다이렉트\r\n\t\tif(loggedIn) return <Redirect to='/'/>\r\n\t\t// 아닐경우 폼 렌더링\r\n\t\treturn (<>\r\n\t\t\t<Form onSubmit={this.login}>\r\n\t\t\t\t<Form.Group>\r\n\t\t\t\t\t<Form.Label>아이디</Form.Label>\r\n\t\t\t\t\t<Form.Control type='text' onChange={(event) => this.setState({ id: event.target.value })}/>\r\n\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t<Form.Group>\r\n\t\t\t\t\t<Form.Label>비밀번호</Form.Label>\r\n\t\t\t\t\t<Form.Control type='password'  onChange={(event) => this.setState({ password: event.target.value })}/>\r\n\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t<Button type='submit'>로그인</Button>\r\n\t\t\t</Form>\r\n\t\t\t\r\n\t\t\t<br/>\r\n\t\t\t<NaverLogin\r\n          \t\tclientId=\"edEf7BinacuDsjWZNbw9\"\r\n          \t\tcallbackUrl=\"http://172.30.1.3:3010/management-callback\"\r\n          \t\trender={(props) => <div onClick={props.onClick}><img src=\"/naver-login.PNG\" /></div>}\r\n          \t\tonSuccess={(res) => {this.responseLogin(res, \"naver\")}}\r\n          \t\tonFailure={() => console.log(\"naver login fail\")}\r\n        />\r\n\t\t</>)\r\n\t}\r\n}","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Register.js",["115","116","117","118","119","120","121","122","123","124","125","126"],"/* 회원가입  페이지 */\r\nimport React, { useRef, useState, useEffect, Fragment } from \"react\"; // state관리와, ref 바인딩을 위한 hooks 라이브러리 임포트\r\nimport axios, { post } from \"axios\"; // 비동기 요청을 위한 axios 라이브러리\r\nimport { Link, useHistory, useLocation, useParams } from \"react-router-dom\"; // 라우팅을 위한 라우터 라이브러리\r\nimport { TextField } from \"@rmwc/textfield\"; // React Material 디자인 TextField 컴포넌트입니다.\r\nimport { Button } from \"@rmwc/button\"; // React Material 디자인 Button 컴포넌트 입니다.\r\nimport { Icon } from \"@rmwc/icon\"; // 프로필 아이콘을 위한 컴포넌트 추가\r\nimport { Checkbox } from \"@rmwc/checkbox\"; //체크박스\r\nimport \"@rmwc/checkbox/styles\"; // checkbox css\r\nimport \"@rmwc/button/styles\"; // React Material Button 디자인 CSS 입니다.\r\nimport \"@rmwc/textfield/styles\"; // React Material TextField 디자인 CSS 입니다.\r\nimport \"@rmwc/icon/styles\"; // 아이콘 디자인 CSS입니다.\r\nimport \"../assets/register.css\"; // 회원가입 페이지 커스텀 디자인 CSS 입니다.\r\n\r\nconst Register = (props) => {\r\n  // 회원가입 페이지입니다. props는 회원수정인지 판단하기 위하여 매개변수로 받습니다. (info)\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [profile, setProfile] = useState(null);\r\n  const [allChecked, setAllChecked] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    profile: null,\r\n    userId: \"\",\r\n    userName: \"\",\r\n    userPassword: \"\",\r\n    userPassword2: \"\",\r\n    userMail: \"\",\r\n    userPhone: \"\",\r\n    userFullAddress: \"\",\r\n    userSubAddress: \"\"\r\n  });\r\n\r\n  const [tempFormData, setTempFormData] = useState({\r\n    profile: null,\r\n    userId: \"\",\r\n    userName: \"\",\r\n    userPassword: \"\",\r\n    userPassword2: \"\",\r\n    userMail: \"\",\r\n    userPhone: \"\",\r\n    userFullAddress: \"\",\r\n    userSubAddress: \"\"\r\n  });\r\n\r\n  const [address, setAddress] = useState(\"\");\r\n\r\n  const profileRef = useRef();\r\n  const iconRef = useRef();\r\n  const previewRef = useRef();\r\n\r\n  const [checkI, setCheckI] = useState(false);\r\n  const [checkM, setCheckM] = useState(false);\r\n  const [fullAdd, setFullAdd] = useState(\"\");\r\n  const [subAdd, setSubAdd] = useState(\"\");\r\n  /* 위에는 변수선언부분들 */\r\n\r\n  // 프로필 로딩, 페이지 로드시 한번만 실행합니다.\r\n  useEffect(() => {\r\n    if (location.state) {\r\n      // 회원수정페인지 확인하는 if문\r\n      fetch(\r\n        `http://172.30.1.3:3001/user/update/${location.state.idx}`,\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      )\r\n        .then((data) => data.json())\r\n        .then((json) => {\r\n          console.log(json);\r\n          setTempFormData({\r\n            profile: json[0][6],\r\n            userId: json[0][1],\r\n            userName: json[0][2],\r\n            userPassword: json[0][3],\r\n            userPassword2: json[0][3],\r\n            userMail: json[0][4],\r\n            userPhone: json[0][5],\r\n            // userFullAddress: json[0][7],\r\n            // userSubAddress: json[0][8]\r\n\r\n          });\r\n          setFormData({\r\n            profile: json[0][6],\r\n            userId: json[0][1],\r\n            userName: json[0][2],\r\n            userPassword: json[0][3],\r\n            userPassword2: json[0][3],\r\n            userMail: json[0][4],\r\n            userPhone: json[0][5],\r\n            // userFullAddress: json[0][7],\r\n            // userSubAddress: json[0][8]\r\n          });\r\n        });\r\n\r\n      previewRef.current.style.display = \"block\";\r\n      iconRef.current.style.display = \"none\";\r\n    }\r\n  }, []);\r\n\r\n  const handleProfileClick = () => {\r\n    // 예쁜 버튼을 사용하기위해, 실제로 프로필사진을 업로드하는 버튼은 숨겨두고 이쁜버튼을누르면 숨겨진버튼이 클릭되도록 하는 부분입니다.\r\n    profileRef.current.click();\r\n  };\r\n\r\n  const handleProfile = (event) => {\r\n    // 프로필사진을 올리면, 미리보기에 사진이 보여지는 부분입니다.\r\n    setProfile(URL.createObjectURL(event.target.files[0]));\r\n\r\n    previewRef.current.style.display = \"block\";\r\n    iconRef.current.style.display = \"none\";\r\n\r\n    setFormData({\r\n      ...formData,\r\n      profile: event.target.files[0], // API에 요청을 날릴 Form State에 정보를 추가합니다.\r\n    });\r\n  };\r\n\r\n  const handleValueChange = (event) => {\r\n    // API 요청에 날릴 Form state에 정보를 추가합니다.\r\n    console.log(formData);\r\n    setFormData({\r\n      ...formData,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const testFunc = () => {\r\n    alert(\"회원가입이 되셨습니다.zz\");\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  const registerSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // 회원가입버튼을 누르면 동작합니다.\r\n    if (formData.userPassword !== formData.userPassword2) {\r\n      // 비밀번호가 서로 다른지 체크하는 validation 코드입니다.\r\n      alert(\"비밀번호를 다시 확인 해주세요\");\r\n      return;\r\n    }\r\n\r\n    if (checkI === false) {\r\n      alert(\"필수 약관을 동의 해주세요\");\r\n      return;\r\n    }\r\n\r\n    let fullAddress = document.getElementById(\"fullAddress\").value;\r\n    let subAddress = document.getElementById(\"subAddress\").value;\r\n\r\n\r\n    const reqFormData = new FormData(); // 파일이 업로드되는 폼이기때문에, multipart/form-data로 전송해야합니다.\r\n    if(formData.profile) reqFormData.append(\"profile\", formData.profile); // 입력한정보들을 폼데이터에 넣어줍니다.\r\n    reqFormData.append(\"userId\", formData.userId);\r\n    reqFormData.append(\"userName\", formData.userName);\r\n    reqFormData.append(\"userPassword\", formData.userPassword);\r\n    reqFormData.append(\"userMail\", formData.userMail);\r\n    reqFormData.append(\"userPhone\", formData.userPhone);\r\n    reqFormData.append(\"userFullAddress\", fullAddress);\r\n    reqFormData.append(\"userSubAddress\", subAddress);\r\n    // const config = {\r\n    //   headers: {\r\n    //     \"content-type\": \"multipart/form-data\", // 헤더설정\r\n    //   },\r\n    // };\r\n\r\n    axios.post('/user/register', reqFormData, { headers: { 'Content-Type': 'multipart/form-data; charset=utf-8;' }})\r\n\t\t\t\t.then(res => { alert('회원가입이 되셨습니다.'); history.push(\"/user/login\"); }) // 성공 시 알림 및 페이지 되돌아가기\r\n\t\t\t\t.catch(err => alert('실패')) // 실패 시 알림\r\n\r\n    // let resData = await post(\r\n    //   `http://172.30.1.3:3000/user/register`,\r\n    //   reqFormData,\r\n    //   config\r\n    // );\r\n\r\n    // if (resData.data.success === true) {\r\n    //   testFunc();\r\n    // }\r\n\r\n  };\r\n\r\n  // const updateSubmit = (event) => {\r\n  //   // 이부분은 회원수정버튼눌렀을때 동작합니다. 회원가입과 동일합니다.\r\n  //   event.preventDefault();\r\n  //   if (formData.userPassword !== formData.userPassword2) {\r\n  //     alert(\"비밀번호를 다시 확인 해주세요\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   let fullAddress = document.getElementById(\"fullAddress\").value;\r\n  //   let subAddress = document.getElementById(\"subAddress\").value;\r\n\r\n\r\n\r\n  //   const reqFormData = new FormData();\r\n  //   reqFormData.append(\"profile\", formData.profile);\r\n  //   reqFormData.append(\"userId\", formData.userId);\r\n  //   reqFormData.append(\"userName\", formData.userName);\r\n  //   reqFormData.append(\"userPassword\", formData.userPassword);\r\n  //   reqFormData.append(\"userMail\", formData.userMail);\r\n  //   reqFormData.append(\"userPhone\", formData.userPhone);\r\n  //   reqFormData.append(\"userFullAddress\", fullAddress);\r\n  //   reqFormData.append(\"userSubAddress\", subAddress);\r\n  //   const config = {\r\n  //     headers: {\r\n  //       \"content-type\": \"multipart/form-data\",\r\n  //     },\r\n  //   };\r\n\r\n  //   post(\r\n  //     `http://172.30.1.3:3010/api/user/update/${location.state.idx}`,\r\n  //     reqFormData,\r\n  //     config\r\n  //   ).then((res) => {\r\n  //     if (res.data.success === true) {\r\n  //       alert(res.data.msg);\r\n  //       history.push(\"/management\"); // 단 회원수정을했을때는 회원관리페이지로 이동합니다.\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  const handleAddress = () => {\r\n    let win = window.open(\"http://172.30.1.3:3010/address\", \"blank\", \"width=800, 600\");\r\n  }\r\n\r\n  const importantPopup = () => {\r\n    window.open(\"http://172.30.1.3:3010/ipopup\", \"새창\", \"width=800, height=600, resizeable=yes\");\r\n  }\r\n\r\n  const marketingPopup = () => {\r\n    window.open(\"http://172.30.1.3:3010/mpopup\", \"새창\", \"width=800, height=600, resizeable=yes\");\r\n  }\r\n\r\n  const toggleChange = () => {\r\n    const checkboxes = Array.from(document.getElementsByClassName(\"check_box\")); // 현재 체크박스들을 모두 array에 담습니다.\r\n\r\n    setAllChecked(!allChecked);\r\n\r\n    if (!allChecked) {\r\n      setCheckI(true);\r\n      setCheckM(true);\r\n    } else {\r\n      setCheckI(false);\r\n      setCheckM(false);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const checkIHandle = () => {\r\n    console.log(\"handle\");\r\n    console.log(!checkI);\r\n    setCheckI(!checkI);\r\n  }\r\n\r\n  const checkMHandle = () => {\r\n    setCheckM(!checkM);\r\n  }\r\n\r\n\r\n\r\n  //아래부분들은 JSX 껍데기입니다.\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"column\">\r\n        <h1 className=\"registerTitle\">회원가입</h1>\r\n      </div>\r\n      <div className=\"column\">\r\n        <Icon icon=\"account_circle\" className=\"profile_icon\" ref={iconRef} />\r\n        <img\r\n          src={profile ? profile : tempFormData.profile}\r\n          alt=\"profile_preview\"\r\n          className=\"profile_preview\"\r\n          ref={previewRef}\r\n        />\r\n        <Button\r\n          label=\"회원사진 등록\"\r\n          outlined\r\n          className=\"profile_button\"\r\n          onClick={handleProfileClick}\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          className=\"hidden_file\"\r\n          hidden\r\n          onChange={handleProfile}\r\n          ref={profileRef}\r\n        />\r\n      </div>\r\n      <div className=\"column_reverse column\">\r\n        <TextField\r\n          outlined\r\n          label=\"이름\"\r\n          className=\"userName registerInput\"\r\n          placeholder=\"공백없이 입력해주세요.\"\r\n          onChange={handleValueChange}\r\n          name=\"userName\"\r\n          value={formData.userName ? formData.userName : \"\"}\r\n        />\r\n        <TextField\r\n          outlined\r\n          label=\"이메일\"\r\n          className=\"userEmail registerInput\"\r\n          placeholder=\"이메일 주소를 입력해주세요.\"\r\n          type=\"email\"\r\n          onChange={handleValueChange}\r\n          name=\"userMail\"\r\n          value={formData.userMail ? formData.userMail : \"\"}\r\n        />\r\n        <TextField\r\n          outlined\r\n          label=\"휴대전화\"\r\n          className=\"userPhone registerInput\"\r\n          placeholder=\"-없이 숫자만 입력해주세요.\"\r\n          onChange={handleValueChange}\r\n          name=\"userPhone\"\r\n          value={formData.userPhone ? formData.userPhone : \"\"}\r\n        />\r\n        <TextField\r\n          outlined\r\n          label=\"아이디\"\r\n          className=\"userId registerInput\"\r\n          placeholder=\"공백없이 입력해주세요.\"\r\n          onChange={handleValueChange}\r\n          name=\"userId\"\r\n          value={formData.userId ? formData.userId : \"\"}\r\n        />\r\n        <TextField\r\n          outlined\r\n          label=\"비밀번호\"\r\n          className=\"userPassword registerInput\"\r\n          type=\"password\"\r\n          placeholder=\"비밀번호를 입력해주세요.\"\r\n          onChange={handleValueChange}\r\n          name=\"userPassword\"\r\n        />\r\n        <TextField\r\n          outlined\r\n          label=\"비밀번호 확인\"\r\n          className=\"userPassword2 registerInput\"\r\n          type=\"password\"\r\n          placeholder=\"비밀번호를 입력해주세요.\"\r\n          onChange={handleValueChange}\r\n          name=\"userPassword2\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"column\">\r\n        <TextField icon=\"search\" label=\"주소 검색\" outlined className=\"registerInput\" onChange={handleValueChange} id=\"fullAddress\" />\r\n\r\n      </div>\r\n\r\n      <div className=\"column\">\r\n        <Button raised className=\"addressButton\" onClick={handleAddress}> 주소 검색</Button>\r\n      </div>\r\n\r\n      <div className=\"column\">\r\n        <TextField label=\"\" outlined className=\"registerInput\" placeholder=\"나머지 주소를 입력하세요.\" id=\"subAddress\" onChange={handleValueChange} />\r\n      </div>\r\n\r\n\r\n      {!props.info ? (\r\n        <Fragment>\r\n          <div className=\"column custom_use\">\r\n            <Checkbox label=\"아래 약관을 전체 동의 합니다.\" className=\"check_all\" checked={allChecked} onChange={toggleChange} />\r\n          </div>\r\n\r\n          <div className=\"column custom_use\">\r\n            <Checkbox label=\"서비스 약관 동의 [필수]\" className=\"check_box\" checked={checkI} onChange={checkIHandle} />\r\n            <Button outlined onClick={importantPopup}>약관보기</Button>\r\n          </div>\r\n\r\n          <div className=\"column custom_use\">\r\n            <Checkbox label=\"마케팅 수신 동의 [선택]\" className=\"check_box\" checked={checkM} onChange={checkMHandle} />\r\n            <Button outlined onClick={marketingPopup}>약관보기</Button>\r\n          </div>\r\n        </Fragment>\r\n\r\n      ) : (\r\n          \"\"\r\n        )}\r\n      <div className=\"column\">\r\n        <Button\r\n          label={props.info ? \"회원 정보 수정\" : \"회원 가입\"}\r\n          raised\r\n          className={\r\n            props.info ? \"registerButton updateButton\" : \"registerButton\"\r\n          }\r\n          type=\"button\"\r\n          onClick={registerSubmit}\r\n          // onClick={props.info ? updateSubmit : registerSubmit}\r\n        />\r\n        {!props.info ? (\r\n          <Link to=\"/login\">\r\n            <Button\r\n              label=\"회원 가입 취소\"\r\n              raised\r\n              className=\"registerCancleButton\"\r\n            />\r\n          </Link>\r\n        ) : (\r\n            \"\"\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Register;\r\n","C:\\6차 프로젝트\\react\\frontend\\src\\views\\Address.js",[],"C:\\6차 프로젝트\\react\\frontend\\src\\views\\Ipopup.js",[],"C:\\6차 프로젝트\\react\\frontend\\src\\views\\Mpopup.js",[],{"ruleId":"127","severity":1,"message":"128","line":6,"column":1,"nodeType":"129","endLine":46,"endColumn":3},{"ruleId":"130","severity":1,"message":"131","line":42,"column":11,"nodeType":"132","messageId":"133","endLine":42,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":76,"column":86,"nodeType":"132","messageId":"133","endLine":76,"endColumn":88},{"ruleId":"134","severity":1,"message":"135","line":83,"column":16,"nodeType":"136","messageId":"137","endLine":83,"endColumn":18},{"ruleId":"130","severity":1,"message":"138","line":74,"column":33,"nodeType":"132","messageId":"133","endLine":74,"endColumn":35},{"ruleId":"139","severity":1,"message":"140","line":81,"column":21,"nodeType":"141","endLine":84,"endColumn":23},{"ruleId":"130","severity":1,"message":"131","line":96,"column":27,"nodeType":"132","messageId":"133","endLine":96,"endColumn":29},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"139","severity":1,"message":"140","line":78,"column":63,"nodeType":"141","endLine":78,"endColumn":93},{"ruleId":"134","severity":1,"message":"135","line":83,"column":16,"nodeType":"136","messageId":"137","endLine":83,"endColumn":18},{"ruleId":"130","severity":1,"message":"131","line":42,"column":11,"nodeType":"132","messageId":"133","endLine":42,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":76,"column":86,"nodeType":"132","messageId":"133","endLine":76,"endColumn":88},{"ruleId":"130","severity":1,"message":"138","line":74,"column":33,"nodeType":"132","messageId":"133","endLine":74,"endColumn":35},{"ruleId":"139","severity":1,"message":"140","line":81,"column":21,"nodeType":"141","endLine":84,"endColumn":23},{"ruleId":"130","severity":1,"message":"131","line":96,"column":27,"nodeType":"132","messageId":"133","endLine":96,"endColumn":29},{"ruleId":"127","severity":1,"message":"128","line":6,"column":1,"nodeType":"129","endLine":46,"endColumn":3},{"ruleId":"139","severity":1,"message":"140","line":67,"column":61,"nodeType":"141","endLine":67,"endColumn":91},{"ruleId":"146","severity":1,"message":"147","line":3,"column":17,"nodeType":"148","messageId":"149","endLine":3,"endColumn":21},{"ruleId":"146","severity":1,"message":"150","line":4,"column":41,"nodeType":"148","messageId":"149","endLine":4,"endColumn":50},{"ruleId":"146","severity":1,"message":"151","line":45,"column":10,"nodeType":"148","messageId":"149","endLine":45,"endColumn":17},{"ruleId":"146","severity":1,"message":"152","line":45,"column":19,"nodeType":"148","messageId":"149","endLine":45,"endColumn":29},{"ruleId":"146","severity":1,"message":"153","line":53,"column":10,"nodeType":"148","messageId":"149","endLine":53,"endColumn":17},{"ruleId":"146","severity":1,"message":"154","line":53,"column":19,"nodeType":"148","messageId":"149","endLine":53,"endColumn":29},{"ruleId":"146","severity":1,"message":"155","line":54,"column":10,"nodeType":"148","messageId":"149","endLine":54,"endColumn":16},{"ruleId":"146","severity":1,"message":"156","line":54,"column":18,"nodeType":"148","messageId":"149","endLine":54,"endColumn":27},{"ruleId":"157","severity":1,"message":"158","line":98,"column":6,"nodeType":"159","endLine":98,"endColumn":8,"suggestions":"160"},{"ruleId":"146","severity":1,"message":"161","line":127,"column":9,"nodeType":"148","messageId":"149","endLine":127,"endColumn":17},{"ruleId":"146","severity":1,"message":"162","line":222,"column":9,"nodeType":"148","messageId":"149","endLine":222,"endColumn":12},{"ruleId":"146","severity":1,"message":"163","line":234,"column":11,"nodeType":"148","messageId":"149","endLine":234,"endColumn":21},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'post' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'address' is assigned a value but never used.","'setAddress' is assigned a value but never used.","'fullAdd' is assigned a value but never used.","'setFullAdd' is assigned a value but never used.","'subAdd' is assigned a value but never used.","'setSubAdd' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.","ArrayExpression",["166"],"'testFunc' is assigned a value but never used.","'win' is assigned a value but never used.","'checkboxes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},"Update the dependencies array to be: [location.state]",{"range":"169","text":"170"},[3230,3232],"[location.state]"]